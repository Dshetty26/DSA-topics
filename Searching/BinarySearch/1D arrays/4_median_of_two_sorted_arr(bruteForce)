// This is the bruteForce approach and will 
// Time Complexity= O(m+n);
// Space Complexity=O(m+n/2) i.e O(m+n);

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int TotalLength=nums1.length+nums2.length;
        
        int mid=(nums1.length+nums2.length)/2;
        return searchMedian(nums1,nums2,TotalLength,mid);
    }


    public double searchMedian(int[] arr1,int[] arr2,int TotalLength,int mid){
        if(TotalLength==2) mid=1;
        int [] newArr=new int[mid+1];
        int ptr1=0,ptr2=0,ptr=0;

        while(ptr1<arr1.length && ptr2<arr2.length & ptr<newArr.length){
            if(arr1[ptr1]<=arr2[ptr2]) newArr[ptr++]=arr1[ptr1++];
            else newArr[ptr++]=arr2[ptr2++];
        }
        while(ptr1<arr1.length && ptr<newArr.length) newArr[ptr++]=arr1[ptr1++];
         while(ptr2<arr2.length && ptr<newArr.length) newArr[ptr++]=arr2[ptr2++];
        
         if(TotalLength==2) return (double)(newArr[mid-1]+newArr[mid])/2;
         if((newArr.length==1)&& mid==0 || TotalLength%2==1) return (double) (newArr[mid]);
         else return (double)(newArr[mid-1]+newArr[mid])/2;
    }

}