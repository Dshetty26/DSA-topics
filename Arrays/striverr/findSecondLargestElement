import java.util.Arrays;
public class findSecondLargest {
    public static void main(String[] args) {
        int []arr={1,9,4,6,1,9,3,1,2};

        System.out.println("Second Largest Value BruteForce:" +BruteForceSolution(arr));
        System.out.println("Second Largest Value BetterApproach:" +BetterApproach(arr));
        System.out.println("Second Largest Value OptimalSolution:" +optimalSolution(arr));

    }

    static int BruteForceSolution(int [] arr){
        for(int i=0;i<arr.length-1;i++){                                    // O(n)
            for(int j=i+1;j<arr.length;j++){                                // O (n*(n-1)) i.e. n_square
                if(arr[i]>arr[j]){
                    int temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
        }
        int Largest=arr[arr.length-1];
        int secondLargest=Integer.MAX_VALUE;
        for(int i=arr.length-2;i>=0;i--){                                //O(n)
            if(arr[i]<Largest) return arr[i];
        }
        return secondLargest;                                             //Time-Complexity=O(n+n_square)
    }


    static int BetterApproach(int [] arr){
        Arrays.sort(arr);                                                //nlogn
        int Largest=arr[arr.length-1];
        int secondLargest=Integer.MAX_VALUE;
        for(int i=arr.length-2;i>=0;i--){                                //O(n)
            if(arr[i]<Largest) return arr[i];                            //TC=n+nlogn
        }
        return secondLargest;
    }


    static int optimalSolution(int [] arr){
        int max=arr[0];
        int secondLargest=Integer.MIN_VALUE;
        for(int i=1;i<arr.length;i++){                              //O(n)
            if(arr[i]>max) max=arr[i];
        }
        for(int i=0;i<arr.length;i++){                              //O(n)
            if(arr[i]>secondLargest && arr[i]<max) secondLargest=arr[i];     //TC= (n+n) = 2n i.e. n
        }
        return secondLargest;
    }
}
